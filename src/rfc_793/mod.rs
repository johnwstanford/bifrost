
pub fn tcp_checksum(src_addr: &[u8], dst_addr: &[u8], tcp_pkt: &mut [u8]) -> Result<(), &'static str> {

    let word0 = u16::from_le_bytes([src_addr[0], src_addr[1]]);
    let word1 = u16::from_le_bytes([src_addr[2], src_addr[3]]);
    let word2 = u16::from_le_bytes([dst_addr[0], dst_addr[1]]);
    let word3 = u16::from_le_bytes([dst_addr[2], dst_addr[3]]);
    let word4 = u16::from_le_bytes([0x00, 0x06]);
    let word5 = (tcp_pkt.len() as u16).swap_bytes();

    let pseudoheader: Vec<u16> = vec![word0, word1, word2, word3, word4, word5];

    let data_u16: &mut [u16] = unsafe {
        std::slice::from_raw_parts_mut(
            tcp_pkt.as_mut_ptr() as *mut u16,
            tcp_pkt.len() / 2,
        )
    };

    data_u16[8] = 0;

    let mut sum = 0u32;

    for word in pseudoheader.iter().chain(data_u16.iter()) {
        sum += (*word) as u32;

        while sum > 0xFFFF {
            let carry = (sum & 0xFFFF0000) >> 16;
            sum &= 0xFFFF;
            sum += carry;
        }

    }

    let sum = -(sum as i32 + 1) as u16;

    data_u16[8] = sum as u16;

    Ok(())

}

#[test]
fn tcp_checksum_1() -> Result<(), &'static str> {

    let src_addr: Vec<u8> = vec![0xc0, 0xa8, 0x4b, 0x01];
    let dst_addr: Vec<u8> = vec![0xc0, 0xa8, 0x4b, 0x02];
    let mut pkt: Vec<u8> = vec![
        0xda, 0xf2, 0x00, 0x16, 0x07, 0x51, 0x4d, 0x35, 0x00, 0x00, 0x00, 0x00,
        0xa0, 0x02, 0xfa, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x02, 0x04, 0x05, 0xb4, 0x04, 0x02, 0x08, 0x0a,
        0x4b, 0xb5, 0x6b, 0xb2, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x09];

    tcp_checksum(&src_addr, &dst_addr, &mut pkt)?;

    assert_eq!(pkt[16], 0x4e);
    assert_eq!(pkt[17], 0xc2);

    Ok(())
}

#[test]
fn tcp_checksum_2() -> Result<(), &'static str> {

    let src_addr: Vec<u8> = vec![0xc0, 0xa8, 0x4b, 0x01];
    let dst_addr: Vec<u8> = vec![0xc0, 0xa8, 0x4b, 0x03];
    let mut pkt: Vec<u8> = vec![
        0xcf, 0x96, 0x00, 0x16, 0x07, 0x1e, 0x50, 0xa1, 0x00, 0x00, 0x00, 0x00,
        0xa0, 0x02, 0xfa, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x02, 0x04, 0x05, 0xb4, 0x04, 0x02, 0x08, 0x0a,
        0xde, 0x70, 0xf4, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x09];

    tcp_checksum(&src_addr, &dst_addr, &mut pkt)?;

    assert_eq!(pkt[16], 0x3b);
    assert_eq!(pkt[17], 0x80);

    Ok(())
}

#[test]
fn tcp_checksum_3() -> Result<(), &'static str> {

    let src_addr: Vec<u8> = vec![0xc0, 0xa8, 0x4c, 0x02];
    let dst_addr: Vec<u8> = vec![0xc0, 0xa8, 0x4c, 0x01];
    let mut pkt: Vec<u8> = vec![
        0xec, 0x48, 0x00, 0x16, 0x48, 0x8a, 0x82, 0x10, 0x00, 0x00, 0x00, 0x00,
	    0xa0, 0x02, 0xfa, 0xf0, 0xc4, 0xd2, 0x00, 0x00, 0x02, 0x04, 0x05, 0xb4, 0x04, 0x02, 0x08, 0x0a,
	    0x4e, 0x0e, 0x6b, 0xde, 0x4f, 0xfd, 0x00, 0x00, 0x01, 0x03, 0x03, 0x09];

    tcp_checksum(&src_addr, &dst_addr, &mut pkt)?;

    assert_eq!(pkt[16], 0x72);
    assert_eq!(pkt[17], 0xd5);

    Ok(())
}

